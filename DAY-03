## Given an integer numRows, return the first numRows of Pascal's triangle.
In Pascal's triangle, each number is the sum of the two numbers directly above it as shown.

public class Solution {
	public List<List<Integer>> generate(int numRows) {
		List<List<Integer>> res = new ArrayList<List<Integer>>();
		List<Integer> row, pre = null;
		for (int i = 0; i < numRows; i++) {
			row = new ArrayList<Integer>();
			for (int j = 0; j <= i; j++)
				if (j == 0 || j == i)
					row.add(1);
				else
					row.add(pre.get(j - 1) + pre.get(j));
			pre = row;
			res.add(row);
		}
		return res;
	}
}

## Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.
Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.
Return k after placing the final result in the first k slots of nums.
Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.

class Solution {
    public int removeDuplicates(int[] nums) {
        int j=0;
        for(int i=1;i<nums.length;i++){
            if(nums[j] !=nums[i]){
                nums[j+1]=nums[i];
                j++;
            }
        }
        return j+1;
    }
}

## Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

class Solution {
    public int[][] merge(int[][] intervals) {
          List<int[]> ans = new ArrayList<>();
          if(intervals.length == 0 || intervals == null) return ans.toArray(new int[0][]);
          Arrays.sort(intervals,(a, b)-> a[0] - b[0]);
          int st = intervals[0][0]; //1 
          int ed = intervals[0][1];  //3
          for(int[] i : intervals){
            if(i[0] <= ed) ed = Math.max(ed, i[1]); //6
            else{
                ans.add(new int[]{st , ed}); //1,6    8,10
                st = i[0]; //8    //15
                ed = i[1]; //10    //18
            }
        }
        ans.add(new int[]{st, ed});  //15,18 for last
        return ans.toArray(new int[0][]); 
    }
}

## Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

 class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans=new ArrayList<>();
    
        Arrays.sort(nums);
        int n=nums.length;
        for(int i=0;i<n;i++){
            int a=nums[i];
            int t=-a;
            int s=i+1;
            int e=n-1;
            while(s<e){
                    List<Integer> w = new ArrayList<>();
                if(nums[s]+nums[e]==t){
                     w.add(nums[i]);w.add(nums[s]);w.add(nums[e]);
                     ans.add(w);
                     while(s<e && nums[s]==nums[s+1])s++;
                     while(s<e && nums[e]==nums[e-1])e--;
                    s++;e--;
                   
                }
                else if (nums[s]+nums[e]>t){
                    e--;
                }
                else
                    s++;
            }
            while(i+1<n && nums[i+1]==nums[i])i++;
        }
        return ans;
    }
}

 
