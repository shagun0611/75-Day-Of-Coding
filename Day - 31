##  Lowest Common Ancestor of a Binary Tree

public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null || root == p || root == q)
            return root;
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        if(left != null && right != null)   return root;
        return left != null ? left : right;
    }
}

## Binary Tree Right Side View

class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        ArrayList<Integer> result = new ArrayList<>();

if(root == null) return result;

Queue<TreeNode> q = new LinkedList<>();
q.add(root);

while(q.isEmpty() == false){
int count = q.size();
for(int i = 0; i < count; i++){
TreeNode curr = q.poll();

if(i == count - 1){
result.add(curr.val);
}

if(curr.left != null){
q.add(curr.left);
}

if(curr.right != null){
q.add(curr.right);
      }
    }
  }
return result;

        
    }
}

##  All Nodes Distance K in Binary Tree

class Solution {
    List<Integer> ans;
    TreeNode target;
    int K;
    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        ans = new LinkedList();
        this.target = target;
        this.K = K;
        dfs(root);
        return ans;
    }

    // Return vertex distance from node to target if exists, else -1
    // Vertex distance: the number of vertices on the path from node to target
    public int dfs(TreeNode node) {
        if (node == null)
            return -1;
        else if (node == target) {
            subtree_add(node, 0);
            return 1;
        } else {
            int L = dfs(node.left), R = dfs(node.right);
            if (L != -1) {
                if (L == K) ans.add(node.val);
                subtree_add(node.right, L + 1);
                return L + 1;
            } else if (R != -1) {
                if (R == K) ans.add(node.val);
                subtree_add(node.left, R + 1);
                return R + 1;
            } else {
                return -1;
            }
        }
    }

    // Add all nodes 'K - dist' from the node to answer.
    public void subtree_add(TreeNode node, int dist) {
        if (node == null) return;
        if (dist == K)
            ans.add(node.val);
        else {
            subtree_add(node.left, dist + 1);
            subtree_add(node.right, dist + 1);
        }
    }
}

## Serialize and Deserialize Binary Tree

import java.util.StringJoiner;

public class Codec {

    public String serialize(TreeNode root) {
        StringJoiner preorder = new StringJoiner(",");
        preorderTraversal(root, preorder);
        System.out.println(preorder.toString());
        return preorder.toString();
    }

    private void preorderTraversal(TreeNode root, StringJoiner preorder) {
        if (root == null) {
            preorder.add(null);
            return;
        }
        preorder.add(String.valueOf(root.val));
        preorderTraversal(root.left, preorder);
        preorderTraversal(root.right, preorder);
    }

    public TreeNode deserialize(String data) {
        return deserializePreorder(new LinkedList<>(Arrays.asList(data.split(","))));
    }

    public TreeNode deserializePreorder(Queue<String> queue) {
        String value = queue.poll();
        if (value.equals("null")) return null;
        TreeNode root = new TreeNode(Integer.parseInt(value));
        root.left = deserializePreorder(queue);
        root.right = deserializePreorder(queue);
        return root;
    }
}



