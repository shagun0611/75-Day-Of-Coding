## Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

class Solution {
    public int[] twoSum(int[] nums, int k)
    {
        HashMap <Integer,Integer> mp=new HashMap<>();
        int arr[]=new int[2];
        for(int i=0;i<nums.length;i++){
            if(mp.containsKey(k-nums[i])){
                arr[0]=i;
                arr[1]=mp.get(k-nums[i]);
                return arr;
            }
            mp.put(nums[i],i);
        }
        return arr;
    }
}

## You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

class Solution {
    public int maxProfit(int[] prices) 
    {
         int buy = Integer.MAX_VALUE, sell = 0;
        for(int i = 0; i < prices.length; i++){
            buy = Math.min(buy, prices[i]);
            sell = Math.max(sell, prices[i] - buy);
        }
       return sell;
    }
}
 
## You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
Increment the large integer by one and return the resulting array of digits.

class Solution {
    public int[] plusOne(int[] digits)
    {
        int len = digits.length;
        for (int i = len - 1; i >= 0; i--) {
            if (digits[i] != 9) {
                digits[i]++;
                return digits;
            }
            digits[i] = 0;
        }

        digits = new int[len + 1];
        digits[0] = 1;
        return digits;
    }
}

## Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
Note that you must do this in-place without making a copy of the array.

class Solution {
    public void moveZeroes(int[] nums){
        int n=nums.length;
        int j=0;
        for(int i=0;i<n;i++){
            if(nums[i]!=0){
                nums[j]=nums[i];
                j++;
                
             }
        }
           while(j<n){
               nums[j]=0;
               j++;
           }
            
    }
       
}
