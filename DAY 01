## Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

class Solution {
    public int[] twoSum(int[] nums, int k)
    {
        HashMap <Integer,Integer> mp=new HashMap<>();
        int arr[]=new int[2];
        for(int i=0;i<nums.length;i++){
            if(mp.containsKey(k-nums[i])){
                arr[0]=i;
                arr[1]=mp.get(k-nums[i]);
                return arr;
            }
            mp.put(nums[i],i);
        }
        return arr;
    }
}

## You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

class Solution {
    public int maxProfit(int[] prices) 
    {
         int buy = Integer.MAX_VALUE, sell = 0;
        for(int i = 0; i < prices.length; i++){
            buy = Math.min(buy, prices[i]);
            sell = Math.max(sell, prices[i] - buy);
        }
       return sell;
    }
}
 
##
