## Binary Tree Zigzag Level Order Traversal

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root){
        Queue<TreeNode> queue=new LinkedList<>();
        List<List<Integer>> wrapList=new ArrayList<>();
        if(root==null)
            return wrapList;
        
        queue.offer(root);
        boolean flag=true;
        while(!queue.isEmpty()){
            int levelNum=queue.size();
            List<Integer> subList =new ArrayList<>(levelNum);
            for(int i=0;i<levelNum;i++)
            {
                if(queue.peek().left !=null)queue.offer(queue.peek().left);
                if(queue.peek().right !=null)queue.offer(queue.peek().right);
                if(flag==true)subList.add(queue.poll().val);
                else
                    subList.add(0,queue.poll().val);
            }
            flag=!flag;
            wrapList.add(subList);
        }
        return wrapList;
    }
}

## Binary Search Tree Iterator

class BSTIterator {
    private List<Integer> lst = new ArrayList<>();
    private TreeNode root = null;
    private int curr = -1;

    public BSTIterator(TreeNode root) {
        this.root = root;
        populateList(root);
    }
    
    public int next() {
        return lst.get(++curr);
    }
    
    public boolean hasNext() {
        if((curr + 1) < lst.size())
            return true;
        return false;
    }
    
    private void populateList(TreeNode root){
        if(root == null)
            return;
        populateList(root.left);
        lst.add(root.val);
        populateList(root.right);
    }
}

## Binary Tree Level Order Traversal

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> queue=new LinkedList<TreeNode>();
        List<List<Integer>> soln=new LinkedList<List<Integer>>();
        if (root==null)
            return soln;
        queue.offer(root);
        while(!queue.isEmpty()){
            int len=queue.size();
            ArrayList<Integer> subarray=new ArrayList<>();
            for(int i=0;i<len;i++){
                TreeNode n=queue.poll();
                if(n.left!=null)queue.add(n.left);
                 if(n.right!=null)queue.add(n.right);
                subarray.add(n.val);
            }
            soln.add(subarray);
        }
        return soln;
    }
    
}

## Path Sum III

class Solution {
    int count = 0;
    int k;
    HashMap<Long, Integer> h = new HashMap();
    public int pathSum(TreeNode root, int targetSum) {
        h.put(0L,1);
        k = targetSum;
        preOrder(root, 0L);
        return count;
    }
    public void preOrder(TreeNode root,long currSum){
        if(root==null) return;
        currSum +=root.val;
        if(h.containsKey(currSum-k)){
            count +=h.get(currSum-k);
        }
        h.put(currSum,h.getOrDefault(currSum,0)+1);
        preOrder(root.left,currSum);
        preOrder(root.right,currSum);
        h.put(currSum,h.get(currSum)-1);
    }
}
