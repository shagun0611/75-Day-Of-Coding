## 3Sum Closest

class Solution {
    public int threeSumClosest(int[] nums, int target) {
       
        Arrays.sort(nums);
         int n=nums.length;
        int sum=nums[0]+nums[1]+nums[n-1];
        for(int i=0;i<n-2;i++){
            int lo=i+1;
            int hi=n-1;
            int temp=0;
            while(lo<hi){
                temp=nums[lo]+nums[hi]+nums[i];
                if(temp>target)hi--;
                else
                    lo++;
                
                if(Math.abs(sum-target)>Math.abs(temp-target))
                    sum=temp;
                 }
        }
        return sum;
    }
}

##  Game of Life

class Solution {
        public void gameOfLife(int[][] board) {

		if(board == null || board.length == 0) 
			return;
		
		int[][] res = new int[board.length][board[0].length];
		
		for (int i = 0; i < res.length; i++) {
			for (int j = 0; j < res[0].length; j++) {
			int curr = 0;
			curr = cal(board,i - 1, j - 1) + cal(board,i - 1, j) + cal(board,i - 1, j + 1) + 
			cal(board,i, j - 1) +  cal(board,i, j + 1) +
				    cal(board,i + 1, j - 1) + cal(board,i + 1, j) + cal(board,i + 1, j + 1);
				 
				if(board[i][j] == 1){
					 if(curr < 2){
						 res[i][j] = 0;
					 }else if(curr == 2 || curr == 3)
						 res[i][j] = 1;
					 else if(curr > 3)
						 res[i][j] = 0;
				}else{
					if(curr == 3)
						res[i][j] = 1;
				}
				
			}
		}
		
		
		for(int i=0; i<board.length; i++)
			  for(int j=0; j<board[i].length; j++)
				  board[i][j]=res[i][j];
	
        
    }
    
    
    private int cal(int[][] board, int i, int j) {
		
		if(i >= 0 && i < board.length && j >= 0 && j < board[0].length)
			return board[i][j];
		return 0;
	}
        
    }
    
    ##  Pairs of Songs With Total Durations Divisible by 60
    
    class Solution {
    public int numPairsDivisibleBy60(int[] time) {
        int ans = 0;
        if (time == null || time.length == 0) 
        return ans;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < time.length; i++) {          
            int rem = time[i]%60; 
            ans += map.getOrDefault((60-rem)%60, 0)
            map.put(rem, map.getOrDefault(rem, 0) + 1);
        }
        return ans;    
    }
}

## 4Sum

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>>ans = new ArrayList<>();
        Arrays.sort(nums);
        
        for(int i=0; i<nums.length-3; i++) {
            if(i==0 || i>0 && nums[i]!=nums[i-1]) {  //additional
                
                for(int j=i+1; j<nums.length-2; j++) {
                    if(j==i+1 || (j>i+1 && nums[j]!=nums[j-1])) { //additional
                        
                        int low = j+1;
                        int high = nums.length-1;
						
						//to prevent integer overflow
                        long sum = nums[i]+nums[j];
                        long target2 = ((long)target - sum);
						
                        while(low < high) {
                            if(nums[low]+nums[high] < target2)
                                low++;
                            else if(nums[low]+nums[high] > target2)
                                high--;
                            else {
                                ans.add(Arrays.asList(nums[i], nums[j], nums[low], nums[high]));
                                while(low<high && nums[low]==nums[low+1])
                                    low++;
                                while(low<high && nums[high]==nums[high-1])
                                    high--;
                                low++;
                                high--;
                            }
                        }
                    }
                }
            }
        }
        return ans;
    }
}
