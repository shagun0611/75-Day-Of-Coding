##  Next Greater Element I

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
	final var map = new HashMap<Integer, Integer>();
	final var result = new int[nums1.length];

	for (var i = 0; i < nums2.length; i++) map.put(nums2[i], i);

	for (var i = 0; i < nums1.length; i++) {
		final var n = nums1[i];
		int j = map.get(n);
		var resultValue = -1;
		for (++j; j < nums2.length; j++) {
			if (n < nums2[j]) {
				resultValue = nums2[j];
				break;
			}
		}
		result[i] = resultValue;
	}

	return result;
}
}

## Next Greater Element II

public class Solution {

    public int[] nextGreaterElements(int[] nums) {
        int[] res = new int[nums.length];
        Stack<Integer> stack = new Stack<>();
        for (int i = 2 * nums.length - 1; i >= 0; --i) {
            while (!stack.empty() && nums[stack.peek()] <= nums[i % nums.length]) {
                stack.pop();
            }
            res[i % nums.length] = stack.empty() ? -1 : nums[stack.peek()];
            stack.push(i % nums.length);
        }
        return res;
    }
}

##  Implement Stack using Queues

class MyStack {
    Queue<Integer> q1;
    Queue<Integer> q2;
    public MyStack() {
        q1=new LinkedList<>();
        q2=new LinkedList<>();
    }
    
    public void push(int x) {
        Queue<Integer> in=q1.isEmpty()?q1:q2,out=q1.isEmpty()?q2:q1;
        in.offer(x);
        while(!out.isEmpty()) {
            in.offer(out.poll());
        }
    }
    
    public int pop() {
        Queue<Integer> out=q1.isEmpty()?q2:q1;
        return out.poll();
    }
    
    public int top() {
        Queue<Integer> out=q1.isEmpty()?q2:q1;
        return out.peek();
    }
    
    public boolean empty() {
        Queue<Integer> out=q1.isEmpty()?q2:q1;
        return out.isEmpty();
    }
}

## Implement Queue using Stacks

class MyQueue {

Stack<Integer> s1;
Stack<Integer> s2;
public MyQueue() {
    s1 = new Stack<Integer>();
    s2 = new Stack<Integer>();
}

public void push(int x) {
    if(s1.empty())
        s1.push(x);
    else
    {
        while(! s1.empty())
        {
          s2.push(s1.pop());
        }
        s1.push(x);
        while(! s2.empty())
        {
          s1.push(s2.pop());
        }
    }   
}

public int pop() {
    int x=0;
    if(! s1.empty())
        x = s1.pop();
    
    return x;
}

public int peek() {
    int x=0;
    if(! s1.empty())
        x = s1.peek();
    
    return x;
}

public boolean empty() {
    
    if(s1.empty() && s2.empty())
        return true;
    else
        return false;
    
}
}
