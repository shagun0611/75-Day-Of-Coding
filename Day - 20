##  Reverse Linked List

class Solution {
    public ListNode reverseList(ListNode head) {
        return  swap(head, null);
    }

    public ListNode swap(ListNode curr, ListNode previous) {
        if (curr == null) {
            return previous;
        }
        ListNode t = curr.next;
        curr.next = previous;
        return swap(t, curr);
    }
}

## Middle of the Linked List

class Solution {
public ListNode middleNode(ListNode head) {

    ListNode fast=head;
    ListNode slow=head;
    
    while(fast!=null && fast.next!=null){
        fast=fast.next.next;
        slow=slow.next;
    }
    return slow;
}
}

## Merge Two Sorted Lists

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode(0);
        ListNode temp = dummy;

        while(list1 != null && list2 != null){

            if(list1.val <= list2.val){
                temp.next = list1;
                list1 = list1.next;
            }else{
                temp.next = list2;
                list2 = list2.next;
            }
            temp = temp.next;
        }

        if(list1 == null){
            temp.next = list2;
        }
        if(list2 == null){
            temp.next = list1;
        }

        return dummy.next;
    }
}

##  Remove Nth Node From End of List

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
       ListNode slow =head;
       ListNode fast=head;
         for(int i=0;i<n;i++)
             fast=fast.next;
          if(fast==null)
              return head.next;
          while(fast.next!=null){
                 slow=slow.next;
                 fast=fast.next;
                      }
                slow.next=slow.next.next;
                return head;
            }
}


