## Valid Parentheses
class Solution {
    public boolean isValid(String s) {

    
        
        Stack<Character> stack = new Stack<Character>();
        
        
        for (int i = 0; i < s.length(); i ++) {
            char ele = s.charAt(i);
            
            if (s.charAt(i) == '(' || s.charAt(i) == '[' || s.charAt(i) == '{') {
                stack.push(ele);
            }
            else{
            if (stack.isEmpty())
            return false;
            if (ele == ')' && stack.peek() == '(') 
               stack.pop();
           else if (ele == '}' && stack.peek() == '{') 
                stack.pop();
          else if (ele == ']' && stack.peek() == '[') 
                stack.pop();
          else 
              break;
        }}
        
return stack.isEmpty();
    }
}

## Min Stack

class MinStack {

    int[] stack, minstack;
    int top, top2, size;
    
    public MinStack() {
        this.stack = new int[10000];
        this.minstack = new int[10000];
        this.top = -1;
        this.top2 = -1;
        this.size = 10000;
    }
    
    public boolean isEmpty() {
        return this.top == -1;
    }
    
    public boolean isFull() {
        return this.top == this.size;
    }
    
     public boolean isMinStackEmpty() {
        return this.top2 == -1;
    }
    
    public boolean isMinStackFull() {
        return this.top2 == this.size;
    }
    
    public void push(int val) {
        if(!isFull()) {
            this.top += 1;
            this.stack[this.top] = val;
            if(!this.isMinStackFull()) {
                minPush(val);
            }
        }
    }
    
    public void minPush(int val) {
        if(this.isMinStackEmpty()) {
             this.top2 += 1;
            this.minstack[this.top2] = val;
        } else {
            int top2 = this.top2();
            if(val < top2) {
                 this.top2 += 1;
                this.minstack[this.top2] = val;
            } else {
                this.top2 += 1;
                this.minstack[this.top2] = top2;
            }
        }
    }
    
    public void pop() {
        if(!this.isEmpty()) {
            this.top -= 1;
            this.pop2();
        }
    }
    
    public void pop2() {
         if(!this.isMinStackEmpty()) {
              this.top2 -= 1;
         }
    }
    
    public int top() {
         if(this.isEmpty()) return -1;
        return this.stack[this.top];
    }
    
     public int top2() {
         if(this.isMinStackEmpty()) return -1;
        return this.minstack[this.top2];
    }
    
    public int getMin() {
         if(!this.isMinStackEmpty()) {
            return this.minstack[this.top2];
         }
        return -1;
    }
}

##  LRU Cache

class LRUCache {
    int capacity;
    LinkedHashMap<Integer, Integer> cache = new LinkedHashMap<>();
    public LRUCache(int capacity) { 
        this.capacity = capacity;
    }
    
    public int get(int key) {
        if (cache.containsKey(key)) {
            makeRecently(key);
            return cache.get(key);
        }
        return -1;
    }
    
    public void put(int key, int val) {
        if (cache.containsKey(key)) {
            cache.put(key, val);
            makeRecently(key);
            return;
        }
        
        if (cache.size() >= capacity) {
            int lru = cache.keySet().iterator().next();
            cache.remove(lru);
        }
        cache.put(key, val);
    }
    
    private void makeRecently(int key) {
        int val = cache.get(key);
        cache.remove(key);
        cache.put(key, val);
    }
}
