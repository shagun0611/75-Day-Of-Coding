## Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

class Solution {
    public int[] sortedSquares(int[] nums) 
    {
        int n=nums.length;
        int nums1[]=new int [n];
        int start=0,end=n-1;
        for(int i=n-1;i>=0;i--){
            if((nums[start]*nums[start])<(nums[end]*nums[end])){ 
                nums1[i]=(nums[end]*nums[end]);
                end--;
            }
            else{
                nums1[i]=nums[start]*nums[start];
                start++;
            }
        }
        return nums1;
    }
}

##You are given an integer array prices where prices[i] is the price of a given stock on the ith day.
On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.
Find and return the maximum profit you can achieve.

class Solution {
    public int maxProfit(int[] prices) {
        int profit=0;
        for(int i=0;i<prices.length-1;i++){
            if(prices[i]<prices[i+1])
                profit+=prices[i+1]-prices[i];
        }
        return profit;
    }
}

##  Given an array of integers nums, calculate the pivot index of this array.
The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.
If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.
Return the leftmost pivot index. If no such index exists, return -1.

class Solution {
    public int pivotIndex(int[] nums) {
        int lsum=0,rsum=0,psum=0;
        for(int i=0;i<nums.length;i++)
            psum+=nums[i];
        
        rsum=psum;
        for(int i=0;i<nums.length;i++){
            lsum=lsum+nums[i];
            if(lsum==rsum)return i;
            rsum=rsum-nums[i];
        }
        return -1;
    }
}
