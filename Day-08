## Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts

class Solution {
    // We don't actually need to reconstruct the whole array to represent cake, we just need to find the largest gap between 2 cuts (including start and end bounderies as cuts) both horizontally and vertically, and return their product.

private long getMaxDiff(int[] arr, int ei) {
	Arrays.sort(arr);
	int max = 0, st = 0;
	for (int i : arr) {
		max = Math.max(i - st, max);
		st = i;
	}
	len = Math.max(len, ei - st);
	return len;
}
public int maxArea(int h, int w, int[] horizontalCuts, int[] verticalCuts) {
	long hl = getMaxDiff(horizontalCuts, h);
	long vl = getMaxDiff(verticalCuts, w);
	return (int)((hl * vl) % 1000000007);
}
}

## Max Area of Island

class Solution {
      public int maxAreaOfIsland(int[][] grid) {
        int max_area = 0;
        for(int i = 0; i < grid.length; i++)
            for(int j = 0; j < grid[0].length; j++)
                if(grid[i][j] == 1)
                    max_area = Math.max(max_area, AreaOfIsland(grid, i, j));
        return max_area;
    }
    
    public int AreaOfIsland(int[][] grid, int i, int j){
        if( i >= 0 && i < grid.length && j >= 0 && j < grid[0].length && grid[i][j] == 1){
            grid[i][j] = 0;
            return 1 + AreaOfIsland(grid, i+1, j) + AreaOfIsland(grid, i-1, j) + AreaOfIsland(grid, i, j-1) + AreaOfIsland(grid, i, j+1);
        }
        return 0;
    }
}
