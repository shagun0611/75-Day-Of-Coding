## Longest Repeating Character Replacement

class Solution {
    public int characterReplacement(String s, int k) {
        
        int start = 0;
        int[] chars = new int[26];
        int maxChar = 0;
        int length =1;
        for(int end=0;end<s.length();end++){
           maxChar = Math.max(maxChar,++chars[s.charAt(end)-'A']);
            
            while(end-start+1 - maxChar > k){
                chars[s.charAt(start)-'A']--;
                start++;
            }
            length = Math.max(length,end-start+1);
        }
        return length;
    }
}

## Subarrays with K Different Integers

class Solution {
    public int subarraysWithKDistinct(int[] nums, int k) {
       return  count(nums, k) - count(nums, k - 1);
    }
    public int count(int[] nums, int k){
        HashMap<Integer, Integer> hm = new HashMap<>();
        
        int left = 0, right = 0, ans = 0;
        
        while(right < nums.length){
            hm.put(nums[right] , hm.getOrDefault(nums[right], 0) + 1);
            
            while(hm.size() == k + 1){
                hm.put(nums[left], hm.get(nums[left]) - 1);
                if(hm.get(nums[left]) == 0)
                    hm.remove(nums[left]);
                    left++;
            }
            ans += right - left + 1;
            right++;
        }
        return ans;
        
    }
}
