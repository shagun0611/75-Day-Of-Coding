## Diameter of Binary Tree

class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
        int maxi[]=new int[1];
        height(root,maxi);
        return maxi[0];
        
    }
    public int height(TreeNode root , int maxi[]){
        if(root==null)
            return 0;
        int lh=height(root.left,maxi);
        int rh=height(root.right,maxi);
        maxi[0]=Math.max(maxi[0],lh+rh);
        return 1+Math.max(lh,rh);
    }
}


## Invert Binary Tree

class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root == null){
            return null;
        }
        // right becomes left
        // left becomes right
        // dfs into the tree, find the leaves, and swap left with right.
        if(root.left == null && root.right == null){
            return root;
        }
        
        TreeNode leftNode = invertTree(root.left);
        TreeNode rightNode = invertTree(root.right);
        
        root.left = rightNode;
        root.right = leftNode;
        
        return root;
        
    }
}

## Subtree of Another Tree

class Solution {
    public boolean isSubtree(TreeNode root, TreeNode subRoot) {
        if(root == null) return false;
        return isSame(root, subRoot) || isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot); 
    }
    
    private boolean isSame(TreeNode root1, TreeNode root2) {
        if(root1 == null && root2 == null) return true;
        if(root1 == null || root2 == null || root1.val != root2.val) return false;
        return isSame(root1.left, root2.left) && isSame(root1.right, root2.right);
    }
}

## Symmetric Tree

class Solution {
    public boolean isSymmetric(TreeNode root) {
        return helper(root.left, root.right);
    }
    public boolean helper(TreeNode l, TreeNode r) {
        if(l == null || r == null) return l == r;
        return !(l.val != r.val || !helper(l.left, r.right) || !helper(l.right, r.left));
    }
}
