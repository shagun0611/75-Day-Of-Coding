##  Spiral Matrix

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        ArrayList<Integer> ans=new ArrayList<>();
        int top=0;
            int bottom=matrix.length-1;
            int left= 0;
            int right=matrix[0].length-1;
        while(true){
            for(int i=left;i<=right;i++) ans.add(matrix[top][i]);
            top++;
            if(top>bottom || left > right) break;
            for(int i=top;i<=bottom;i++) ans.add(matrix[i][right]);
            right--;
            if(top>bottom || left > right) break;
            for(int i=right;i>=left;i--) ans.add(matrix[bottom][i]);
            bottom--;
            if(top>bottom || left > right) break;
            for(int i=bottom;i>=top;i--) ans.add(matrix[i][left]);
            left++;
            if(top>bottom || left > right) break;
            
        }
        return ans;
    }
}

## Rotate Image

class Solution {
    public void rotate(int[][] matrix) {
        
        //transpose
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<i;j++){
                int temp=matrix[i][j];
                matrix[i][j]=matrix[j][i];
                matrix[j][i]=temp;
            }
        }
            for (int i = 0; i <matrix.length  ; i++) {
             int start = 0;
             int end = matrix.length - 1;
           while (start <= end) {
             int temp = matrix[i][start];
            matrix[i][start] = matrix[i][end];
            matrix[i][end] = temp;
            start++;
            end--;
        }
    }
    
    }
}

## Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

class Solution {
        public boolean exist(char[][] board, String word) {
            for (int i = 0; i < board.length; i++)
                for (int j = 0; j < board[0].length; j++)
                    if (board[i][j] == word.charAt(0) && isFound(board, i, j, word, 0))
                        return true;

            return false;
        }
private boolean isFound(char[][] board, int i, int j, String word, int index) {
            if (index == word.length()) 
                return true;
    
            if (i < 0 || j < 0 || i >= board.length || j >= board[0].length) 
                return false;
    
            if (word.charAt(index) != board[i][j]) return false;
    
            char temp = board[i][j];
            board[i][j] = '*';
            if (isFound(board, i + 1, j, word, index + 1) ||
                    isFound(board, i - 1, j, word, index + 1) ||
                    isFound(board, i, j + 1, word, index + 1) ||
                    isFound(board, i, j - 1, word, index + 1))
                return true;
            board[i][j] = temp;
            return false;
        }
    }
