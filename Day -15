##  Pow(x, n)

class Solution {
    public double myPow(double x, int n){
        double ans=1.0;
        long num=n;
        if(num<0)
            num= -1*num;
        while(num>0){
            if(num%2 ==1){ //odd
                ans=ans*x;
                num--;
            }
            else{  //even
                x=x*x;
                num=num/2;
            }
        }
        if(n<0)
            ans= (double) (1.0) / (double) (ans);
            return ans;
        
    }
}

##  Find First and Last Position of Element in Sorted Array

class Solution {
    public int[] searchRange(int[] nums, int target) {
        
        int[] ans=new int[2];
        ans[0]=searchEle(nums,target,true);
        ans[1]=searchEle(nums,target,false);
        return ans;
        
    }
    public int searchEle(int[] nums,int target,boolean occurance)
    {
        int start=0,end=nums.length-1;
        int res=-1;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            
            if(target==nums[mid])
            {
                res=mid;
                if(occurance)
                {
                    end=mid-1;
                }
                else
                {
                    start=mid+1;
                }
            }
            else if(target<nums[mid])
            {
                end=mid-1;
            }
            else
            {
                start=mid+1;
            }
        }
        return res;
    }
}

##  Find Peak Element

public class Solution {
    public int findPeakElement(int[] nums) {
        int l = 0, r = nums.length - 1;
        while (l < r) {
            int mid = (l + r) / 2;
            if (nums[mid] > nums[mid + 1])
                r = mid;
            else
                l = mid + 1;
        }
        return l;
    }
}

##  Search a 2D Matrix

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int row=matrix.length;
        int col=matrix[0].length;
        int i=0;
        // 1 element
        if(row==1 && col==1){
            if(matrix[0][0]==target)
                return true;
            else
                return false;
        }
        // looping 
        
        for(i=0;i<row;i++){
            int lastEleOfRow=matrix[i][col-1];
            if(target==lastEleOfRow)
                return true;
            else if(target<=lastEleOfRow)
                break;
            else if(target>lastEleOfRow && i<row-1)
                continue;
            else // if target saare end element se bdaa hai sbko surpass krgya
                return false;        
        }
        for(int j=0;j<col;j++){
            if(matrix[i][j]==target)
                return true;
        }
        return false;
    }
}
