##  Combination Sum

class Solution {
     List<List<Integer>> ans=new ArrayList <>();
    public List<List<Integer>> combinationSum(int[] candidates, int target){
        if(candidates.length==0)
            return ans;
        ArrayList<Integer> arr=new ArrayList<>();
        help(candidates,target,0,arr,0);
       return ans;
         }
    public void help(int[] candidates, int target, int currsum, ArrayList<Integer> arr , int index){
        if(index >= candidates.length || currsum > target)
            return ;
        if(currsum==target){
            ans.add(new ArrayList<>(arr));
            return;
        }
        for(int i=index;i<candidates.length;i++){
            arr.add(candidates[i]);
             help(candidates,target,currsum+candidates[i],arr,i);
            arr.remove(arr.size()-1);
        }
    }
}

## Jump Game

class Solution {
    public boolean canJump(int[] A) {
        int jumps = 0, pos = 0, des = 0;
        
	for (int i = 0; i < A.length - 1; i++) {
		des = Math.max(des, i + A[i]);
		if (pos==i) {
			jumps++;
			pos = des ;
		}
	}
        if(A.length-1==pos) return true;
        else
            return false;
    }
}

## Maximum Points You Can Obtain from Cards

class Solution {
    public int maxScore(int[] cp, int k) {
       int n = cp.length;
       int leftsum = 0;
     for (int i = 0; i < k; i++) {
           leftsum += cp[i];
        }
    int max = leftsum;
    int rightsum = 0;

    for (int i = 0; i < k; i++) {
        leftsum  -= cp[k - 1 - i];
        rightsum += cp[n - 1 - i];
        max = Math.max(max, leftsum + rightsum);
    }

    return max;
  }
}
